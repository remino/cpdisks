#!/bin/sh
# cpdisks

VERSION='1.0.1'

cpdisks_main() {
	trap _exit INT TERM

	e_args=16
	e_missing_app=17
	e_cannot_mkdir=18

	scriptinv="$( basename "$0" )"
	scriptpath="$( readlink -f "$0" )"
	scriptname="$( basename "$scriptpath" )"

	while getopts hv opt
	do
		case $opt in
			h) cmd=help ;;
			v) cmd=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	if [ -z "$cmd" ]
	then
		[ $# -lt 1 ] && cmd=help || cmd=process
	fi

	case "$cmd" in
		help|process|version) "cpdisks_$cmd" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

cpdisks_help() {
cat <<USAGE
$scriptname $VERSION

USAGE: $scriptinv [<options>] <source disk> <destination dir>

Copy several disks one by one in a single directory.

This will copy the contents of the disk to the destination directory under a
subdirectory named after the disk. The disk will be ejected after copying and
the process will wait for the next disk to be inserted.

To end the process, press Ctrl+C.

Works best on macOS. On other platforms, the disk must be ejected manually.

OPTIONS:

	-h        Show this help screen.
	-v        Show script name and version number.

USAGE
}

cpdisks_process() {
	[ $# -lt 2 ] \
		&& _fatal $e_args "Must specify source disk and destination dir."

	disk="$1"
	dst="$2"

	_mkdir "$dst"

	while true
	do
		_cp_disk "$disk" "$dst"
	done
}

cpdisks_version() {
	_echo "$scriptname $VERSION"
}

_cp_disk() {
	disk="$1"
	dst="$2"

	_echo "$disk => $dst"
	src=""

	_echo "Waiting for disk..."

	while [ -z "$src" ]
	do
		src="$( _get_mount_point "$disk" )"
		[ -z "$src" ] && sleep 2
	done

	name="$( basename "$src" )"

	_echo "Disk: $name"

	cp -av "$src" "$dst/$name"

	if _exists diskutil
	then
		_echo "Ejecting disk..."
		diskutil eject "$disk"
	else
		printf "Eject the disk manually. Hit Enter to continue."
		read -r pause
	fi

	_echo "Insert next disk."
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exists() {
	which "$1" > /dev/null 2>&1
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_get_mount_point() {
	mounted_disk="$1"

	mount \
		| grep -E "^${mounted_disk}[^\d]" \
		| sed -E 's/^[^ ]+ on //;s/ \(.*\)$//'
}

_invalid_cmd() {
	_error "Invalid command: $cmd"
	_echo
	cpdisks_help
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	cpdisks_help
	exit $e_args
}

_mkdir() {
	dir="$1"
	[ -d "$dir" ] && return
	mkdir -p "$dir"
	[ -d "$dir" ] && return
	_fatal $e_cannot_mkdir "Could not create dir: $dir"
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! _exists "$bin"
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]
	then
		_fatal "$e_missing_app" "One or more executables or apps are missing."
	fi
}

cpdisks_main "$@"
